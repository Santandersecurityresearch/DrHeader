name: Create release

on:
  push:
    branches:
      - master

jobs:
  release:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ vars.PYTHON_VERSION }}

      - name: Load cached Poetry installation
        id: cached-poetry-installation
        uses: actions/cache@v4
        with:
          path: |
            ~/.local
            ~/.config/pypoetry
          key: poetry-${{ vars.POETRY_VERSION }}

      - name: Install Poetry if not cached installation
        if: steps.cached-poetry-installation.outputs.cache-hit != 'true'
        uses: snok/install-poetry@v1
        with:
          version: ${{ vars.POETRY_VERSION }}
          virtualenvs-create: true

      - name: Build release artifacts
        run: poetry build

      - name: Get release version
        run: echo "VERSION"=$(grep -i 'version = ' pyproject.toml | head -1 | tr -d 'version = "') >> $GITHUB_ENV

      - name: Create release
        uses: ncipollo/release-action@v1
        with:
          artifacts: dist/*
          tag: v${{ env.VERSION }}
          generateReleaseNotes: true

      - name: Publish to PyPI
        env:
          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}
          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: poetry publish
